name: 'Generate Kustomization Base and Overlays Structure'
description: 'Generates Kustomization base and overlay folders and files structure and merges if kustomization.yaml already exists'
inputs:
  basePath:
    description: 'The base path to create the Kustomize files in. Example: ./k8s/base'
    required: true
  environments:
    description: 'The environments to create overlays for. Comma-delimited string. Example: dev,staging,prod'
    required: true
    default: ''
  namespace:
    description: 'The namespace to create the resources in'
    required: false
    default: 'default'
  commonLabels:
    description: 'The labels to add to the resources. Comma-delimited string of key-value pairs. Example: app:nginx,env:dev'
    required: false
  annotations:
    description: 'The annotations to add to the resources. Comma-delimited string of key-value pairs. Example: team:devops,owner:john'
    required: false
  envPrefix:
    description: 'Add environment prefix to add to the resources'
    required: false
    default: 'false'
  
runs:
  using: "composite"
  steps:
    - name: Install tools
      uses: touchground/devops-tools@release
      with:
        yq: '4.42.1'
        kustomize: '5.3.0'

    - name: Input Validation
      run: |
        BASE_DIR="${{ inputs.basePath }}"
        if [ ! -d "$BASE_DIR" ]; then
          echo "::error::Directory $BASE_DIR does not exist"
          exit 1
        fi

        YAML_FILES=$(find $BASE_DIR -name "*.yaml")
        if [ -z "$YAML_FILES" ]; then
          echo "::error::No YAML files found in $BASE_DIR and its subdirectories"
          exit 1
        fi

        ENVIRONMENTS="${{ inputs.environments }}"
        if [ -z "$ENVIRONMENTS" ] || [[ "$ENVIRONMENTS" != *","* ]]; then
          echo "::error::Environments input is empty or not a comma-delimited string"
          exit 1
        fi
      shell: bash

    - name: Generate Kustomization Base and Overlay Structure
      run: |
        # merge function
        merge_kustomization_files() {
          FILENAME=$1
          echo "Merging $FILENAME file..."
          if [ ! -f $FILENAME ]; then
            echo "::error::Input file missing or not found. Please check the file and try again."
            exit 1
          fi
          # Merge the existing kustomization.yaml file with the new one
          tg-yq eval-all 'select(fileIndex == 0) * select(fileIndex == 1)' $FILENAME kustomization.yaml > kustomization_merged.yaml
          if [ $? -ne 0 ]; then
            echo "::error::Failed to merge into existing kustomization.yaml file. Please check the file and try again."
            rm kustomization.yaml && mv $FILENAME kustomization.yaml
            exit 1
          fi

          # Remove the temporary files and rename the merged file to kustomization.yaml
          rm -f $FILENAME kustomization.yaml && mv kustomization_merged.yaml kustomization.yaml
        }

        # Suppress output
        pushd () {
          command pushd "$@" > /dev/null
        }

        popd () {
          command popd "$@" > /dev/null
        }

        BASE_DIR="${{ inputs.basePath }}"
        PARENT_DIR=$(dirname $BASE_DIR)

        # Create base kustomization.yaml
        pushd $BASE_DIR
        echo "Generate Base"
        # If kustomization.yaml already exists
        if [ -f "kustomization.yaml" ]; then
          merge_kube=true
          mv kustomization.yaml kustomization_original.yaml
        fi

        # Generate base
        tg-kustomize create --autodetect 

        # Remove any patch files in kustomization.yaml
        sed -i '/patch-base.yaml/d' kustomization.yaml
        
        # Update image name to a spaceholder in deployment file
        if [ -f "deployment.yaml" ]; then
          echo "Update image name"
          sed -i 's|^\(\s*- image:\).*|\1 IMAGE_NAME|' deployment.yaml
        fi

        # Add labels to kustomization.yaml
        LABELS="${{ inputs.commonLabels }}"
        if [ -n "$LABELS" ]; then
          echo "Adding labels"
          echo "commonLabels:" >> kustomization.yaml
          IFS=',' read -ra LABEL_ARRAY <<< "$LABELS"
          for LABEL in "${LABEL_ARRAY[@]}"; do
            IFS=':' read -ra KV <<< "$LABEL"
            echo "  ${KV[0]}: \"${KV[1]}\"" >> kustomization.yaml
          done
        fi

        # Add annotations to kustomization.yaml
        ANNOTATIONS="${{ inputs.annotations }}"
        if [ -n "$ANNOTATIONS" ]; then
          echo "Adding annotations"
          echo "commonAnnotations:" >> kustomization.yaml
          IFS=',' read -ra ANNOTATION_ARRAY <<< "$ANNOTATIONS"
          for ANNOTATION in "${ANNOTATION_ARRAY[@]}"; do
            IFS=':' read -ra KV <<< "$ANNOTATION"
            KEY=${KV[0]}
            VALUE="${ANNOTATION#*:}"
            echo "  $KEY: \"$VALUE\"" >> kustomization.yaml
          done
        fi

        # Add namespace to kustomization.yaml if it exists
        NAMESPACE="${{ inputs.namespace }}"
        if [ -n "$NAMESPACE" ]; then
          echo "Adding namespace"
          echo "namespace: $NAMESPACE" >> kustomization.yaml
        fi
      
        # If kustomization.yaml already exists, merge it with the new one
        if [ "$merge_kube" == "true" ]; then
          merge_kustomization_files kustomization_original.yaml
        fi

        popd
        echo " "
        # Create overlays kustomization folders and kustomization.yaml files for each environment
        echo "Create overlay environment structure"
        echo "=========================================="
        ENVIRONMENTS="${{ inputs.environments }}"
        IFS=',' read -ra ENV_ARRAY <<< "$ENVIRONMENTS"
        for ENV in "${ENV_ARRAY[@]}"; do
          echo "Processing $ENV..."
          mkdir -p $PARENT_DIR/overlays/$ENV
          pushd $PARENT_DIR/overlays/$ENV

          # Refresh patches files from base to overlays
          if ls *patch*.yaml 1> /dev/null 2>&1; then
            echo "Deleting all *patch*.yaml files in the $ENV.."
            rm -f *patch*.yaml
          fi
          if ls $BASE_DIR/*patch*.yaml 1> /dev/null 2>&1; then
            echo "Refresh patches files from base to overlays"
            cp $BASE_DIR/*patch*.yaml .
          fi

          # find all yaml files in the directory
          YAML_FILES=$(find . -name "*.yaml" ! -name "kustomization.yaml")
          # categorize yaml files into resources and patches
          RESOURCE_YAML_FILES_ARRAY=()
          PATCH_YAML_FILES_ARRAY=()

          for FILE in $YAML_FILES; do
            FILENAME=$(basename -- "$FILE")
            if [[ $FILENAME == *patch* ]]; then
              PATCH_YAML_FILES_ARRAY+=("$FILENAME")
            else
              RESOURCE_YAML_FILES_ARRAY+=("$FILENAME")
            fi
          done

          # Don't merge if kustomization.yaml alreay exist in overlays 
          if [ ! -f "kustomization.yaml" ]; then
            echo "Generating kustomization.yaml..."
           
            # add ../../base to resources
            echo "Adding ../../base to resources"
            RESOURCE_YAML_FILES_ARRAY+=("../../base")
            YAML_FILES_COMMA_SEPARATED=$(IFS=','; echo "${RESOURCE_YAML_FILES_ARRAY[*]}")
            echo "YAML_FILES_COMMA_SEPARATED: $YAML_FILES_COMMA_SEPARATED"
            tg-kustomize create --resources $YAML_FILES_COMMA_SEPARATED

            # Add patch files to the appropriate section in kustomization.yaml
            if [ ${#PATCH_YAML_FILES_ARRAY[@]} -ne 0 ]; then
              echo "patches:" >> kustomization.yaml
              for PATCH_FILE in "${PATCH_YAML_FILES_ARRAY[@]}"; do
                PATCH_KIND=$(tg-yq e '.kind' "$PATCH_FILE")
                if [ -n "$PATCH_KIND" ]; then
                  echo "Adding $PATCH_FILE to patches"
                  echo "- path: $PATCH_FILE" >> kustomization.yaml
                  echo "  target:" >> kustomization.yaml
                  echo "    kind: $(tg-yq e '.kind' $PATCH_FILE)" >> kustomization.yaml
                else
                  echo "::error::Kind not found in $PATCH_FILE, please fix it then try agian..."
                  exit 1
                fi
              done
            fi
            # Add namePrefix if envPrefix is true
            if [ "${{ inputs.envPrefix }}" = "true" ]; then
              echo "namePrefix: $ENV-" >> kustomization.yaml
            fi

            # Add images placeholder
            echo "images:" >> kustomization.yaml
            echo "- name: IMAGE_NAME" >> kustomization.yaml
            echo "  newName: NoImage" >> kustomization.yaml
            echo "  newTag: v1.0" >> kustomization.yaml

          else
            echo "kustomization.yaml aleady exists"

            # Check if any resource file in kustomization.yaml no longer exists
            echo "Checking for non-existent resource files..."
            CURRENT_RESOURCES=$(tg-yq e '.resources[]' kustomization.yaml)
            for RESOURCE in $CURRENT_RESOURCES; do
              # Check if the resource file is in the root directory
              if [[ $RESOURCE != */* ]]; then
                if [[ ! -f "$RESOURCE" ]]; then
                  echo "Resource file $RESOURCE no longer exists, removing it from kustomization.yaml..."
                  tg-yq e -i "del(.resources[] | select(. == \"$RESOURCE\"))" kustomization.yaml
                fi
              fi
            done
            
            # Check if any resource file is missing compared to RESOURCE_YAML_FILES_ARRAY
            echo "Checking for missing resource files..."
            CURRENT_RESOURCES=$(tg-yq e '.resources[]' kustomization.yaml)
            for RESOURCE in "${RESOURCE_YAML_FILES_ARRAY[@]}"; do
              if [[ ! "$CURRENT_RESOURCES" =~ "$RESOURCE" ]]; then
                echo "Resource file $RESOURCE is missing in kustomization.yaml, adding it..."
                tg-yq e -i ".resources += [\"$RESOURCE\"]" kustomization.yaml
              fi
            done
            
            # Check if .patches[] exists in kustomization.yaml
            if tg-yq e '.patches[]' kustomization.yaml > /dev/null; then
              # Get current patches from kustomization.yaml
              CURRENT_PATCHES=$(tg-yq e '.patches[].path' kustomization.yaml)
              has_patches=true
            else
              echo ".patches[] does not exist in kustomization.yaml"
              CURRENT_PATCHES=""
              has_patches=false
            fi

            # Add missing patch files
            for PATCH_FILE in "${PATCH_YAML_FILES_ARRAY[@]}"; do
              if [ "$has_patches" = "false" ]; then
                echo "patches:" >> kustomization.yaml
                has_patches=true
              fi
              if [[ ! "$CURRENT_PATCHES" =~ "$PATCH_FILE" ]]; then
                echo "Patch file $PATCH_FILE is missing in kustomization.yaml, adding it..."
                PATCH_KIND=$(tg-yq e '.kind' "$PATCH_FILE")
                echo "PATCH_KIND: $PATCH_KIND"
                if [ -n "$PATCH_KIND" ]; then
                  echo "Adding $PATCH_FILE to patches"
                  tg-yq e -i ".patches += [{\"path\": \"$PATCH_FILE\", \"target\": {\"kind\": \"$PATCH_KIND\"}}]" kustomization.yaml
                else
                  echo "::error::Kind not found in $PATCH_FILE, please fix it then try agian..."
                  exit 1
                fi
              fi
            done

            # Remove non-existent patch files
            for PATCH_FILE in $CURRENT_PATCHES; do
              if [[ ! -f "$PATCH_FILE" ]]; then
                echo "Patch file $PATCH_FILE no longer exists, removing it from kustomization.yaml..."
                tg-yq e -i "del(.patches[] | select(.path == \"$PATCH_FILE\"))" kustomization.yaml
              fi
            done

            # Check if namePrefix exists in kustomization.yaml
            if tg-yq e '.namePrefix' kustomization.yaml > /dev/null; then
              if [ "${{ inputs.envPrefix }}" = "false" ]; then
                # Remove the namePrefix value
                echo "Removing namePrefix from kustomization.yaml..."
                tg-yq e -i "del(.namePrefix)" kustomization.yaml
              else
                # Update the namePrefix value
                echo "Adding namePrefix from kustomization.yaml..."
                tg-yq e -i ".namePrefix = \"$ENV-\"" kustomization.yaml
              fi
            else
              if [ "${{ inputs.envPrefix }}" = "true" ]; then
                # Add namePrefix if it doesn't exist
                echo "Adding namePrefix from kustomization.yaml..."
                echo "namePrefix: $ENV-" >> kustomization.yaml
              fi
            fi
          fi

          popd
          echo "=========================================="
        done

        # Remove patches files from base
        rm -f $BASE_DIR/*patch*.yaml

        echo "completed!"
      shell: bash

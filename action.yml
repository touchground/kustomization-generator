name: 'Generate Kustomization Base and Overlays Structure'
description: 'Generates Kustomization base and overlay folders and files structure and merges if kustomization.yaml already exists'
inputs:
  basePath:
    description: 'The base path to create the Kustomize files in. Example: ./k8s/base'
    required: true
  environments:
    description: 'The environments to create overlays for. Comma-delimited string. Example: dev,staging,prod'
    required: true
    default: ''
  namespace:
    description: 'The namespace to create the resources in'
    required: false
    default: 'default'
  commonLabels:
    description: 'The labels to add to the resources. Comma-delimited string of key-value pairs. Example: app=nginx,env=dev'
    required: false
  envPrefix:
    description: 'Add environment prefix to add to the resources'
    required: false
    default: 'false'
  
runs:
  using: "composite"
  steps:
    - name: Install tools
      uses: touchground/devops-tools@release
      with:
        yq: '4.42.1'
        kustomize: '5.3.0'

    - name: Input Validation
      run: |
        BASE_DIR="${{ inputs.basePath }}"
        if [ ! -d "$BASE_DIR" ]; then
          echo "Directory $BASE_DIR does not exist"
          exit 1
        fi

        YAML_FILES=$(find $BASE_DIR -name "*.yaml")
        if [ -z "$YAML_FILES" ]; then
          echo "No YAML files found in $BASE_DIR and its subdirectories"
          exit 1
        fi

        ENVIRONMENTS="${{ inputs.environments }}"
        if [ -z "$ENVIRONMENTS" ] || [[ "$ENVIRONMENTS" != *","* ]]; then
          echo "Environments input is empty or not a comma-delimited string"
          exit 1
        fi
      shell: bash

    - name: Generate Kustomization Base and Overlay Structure
      run: |
        # merge function
        merge_kustomization_files() {
          tg-yq eval-all 'select(fileIndex == 0) * select(fileIndex == 1)' kustomization.yaml kustomization_original.yaml > kustomization_merged.yaml
          if [ $? -ne 0 ]; then
            echo "Failed to merge into existing kustomization.yaml file. Please check the file and try again."
            rm kustomization.yaml && mv kustomization_original.yaml kustomization.yaml
            exit 1
          fi
          rm kustomization_original.yaml
          rm kustomization.yaml
          mv kustomization_merged.yaml kustomization.yaml
        }

        # Suppress output
        pushd () {
          command pushd "$@" > /dev/null
        }

        popd () {
          command popd "$@" > /dev/null
        }

        BASE_DIR="${{ inputs.basePath }}"
        PARENT_DIR=$(dirname $BASE_DIR)

        # Create base kustomization.yaml
        pushd $BASE_DIR
        echo "Generate Base"
        # If kustomization.yaml already exists, skip
        if [ ! -f "kustomization.yaml" ]; then
          # Generate base
          tg-kustomize create --autodetect
        
          # remove image name when using overlays to set actual image tag
          sed '/^          name: IMAGE/d' deployment.yaml

          # Add labels to kustomization.yaml
          LABELS="${{ inputs.commonLabels }}"
          if [ -n "$LABELS" ]; then
            echo "Adding labels"
            echo "commonLabels:" >> kustomization.yaml
            IFS=',' read -ra LABEL_ARRAY <<< "$LABELS"
            for LABEL in "${LABEL_ARRAY[@]}"; do
              IFS='=' read -ra KV <<< "$LABEL"
              echo "  ${KV[0]}: \"${KV[1]}\"" >> kustomization.yaml
            done
          fi

          # Add namespace to kustomization.yaml if it exists
          NAMESPACE="${{ inputs.namespace }}"
          if [ -n "$NAMESPACE" ]; then
            echo "Adding namespace"
            echo "namespace: $NAMESPACE" >> kustomization.yaml
          fi
        fi

        popd
        echo " "
        # Create overlays kustomization folders and kustomization.yaml files for each environment
        echo "Create overlay environment structure"
        echo "=========================================="
        ENVIRONMENTS="${{ inputs.environments }}"
        IFS=',' read -ra ENV_ARRAY <<< "$ENVIRONMENTS"
        for ENV in "${ENV_ARRAY[@]}"; do
          echo "Processing $ENV..."
          mkdir -p $PARENT_DIR/overlays/$ENV
          pushd $PARENT_DIR/overlays/$ENV

          # If kustomization.yaml already exists, merge it with the new one 
          if [ ! -f "kustomization.yaml" ]; then
            echo "Generating kustomization.yaml..."

            # Add yaml files to the appropriate section in kustomization.yaml
            YAML_FILES=$(find . -name "*.yaml" ! -name "kustomization.yaml")
            RESOURCE_YAML_FILES_ARRAY=()
            PATCH_YAML_FILES_ARRAY=()

            for FILE in $YAML_FILES; do
              FILENAME=$(basename -- "$FILE")
              if [[ $FILENAME == patch* ]]; then
                PATCH_YAML_FILES_ARRAY+=("$FILENAME")
              else
                echo "Adding $FILENAME to resources"
                RESOURCE_YAML_FILES_ARRAY+=("$FILENAME")
              fi
            done
           
            # add ../../base to resources
            echo "Adding ../../base to resources"
            RESOURCE_YAML_FILES_ARRAY+=("../../base")
            YAML_FILES_COMMA_SEPARATED=$(IFS=','; echo "${RESOURCE_YAML_FILES_ARRAY[*]}")
            echo "YAML_FILES_COMMA_SEPARATED: $YAML_FILES_COMMA_SEPARATED"
            tg-kustomize create --resources $YAML_FILES_COMMA_SEPARATED

            # Add patch files to the appropriate section in kustomization.yaml
            if [ ${#PATCH_YAML_FILES_ARRAY[@]} -ne 0 ]; then
              echo "patches:" >> kustomization.yaml
              for PATCH_FILE in "${PATCH_YAML_FILES_ARRAY[@]}"; do
                echo "Adding $PATCH_FILE to patches"
                echo "- path: $PATCH_FILE" >> kustomization.yaml
                echo "  target:" >> kustomization.yaml
                echo "    kind: $(yq e '.kind' $PATCH_FILE)" >> kustomization.yaml
              done
            fi
            # Add namePrefix if envPrefix is true
            if [ "${{ inputs.envPrefix }}" = "true" ]; then
              echo "namePrefix: $ENV-" >> kustomization.yaml
            fi

            # Add images placeholder
            echo "images:" >> kustomization.yaml
            echo "- name: IMAGE_NAME" >> kustomization.yaml
            echo "  newName: myApp" >> kustomization.yaml
            echo "  newTag: v1.0" >> kustomization.yaml

          else
            echo "kustomization.yaml aleady exists, skip generate new file."
            # mv kustomization.yaml kustomization_original.yaml

            #  # Add yaml files to the appropriate section in kustomization.yaml
            # YAML_FILES=$(find . -name "*.yaml" ! -name "kustomization*.yaml")
            # RESOURCE_YAML_FILES_ARRAY=()
            # PATCH_YAML_FILES_ARRAY=()

            # for FILE in $YAML_FILES; do
            #   FILENAME=$(basename -- "$FILE")
            #   if [[ $FILENAME == patch* ]]; then
            #     PATCH_YAML_FILES_ARRAY+=("$FILENAME")
            #   else
            #     echo "Adding $FILENAME to resources"
            #     RESOURCE_YAML_FILES_ARRAY+=("$FILENAME")
            #   fi
            # done
            
            # # add ../../base to resources
            # echo "Adding ../../base to resources"
            # RESOURCE_YAML_FILES_ARRAY+=("../../base")
            # YAML_FILES_COMMA_SEPARATED=$(IFS=','; echo "${RESOURCE_YAML_FILES_ARRAY[*]}")
            # echo "YAML_FILES_COMMA_SEPARATED: $YAML_FILES_COMMA_SEPARATED"
            # tg-kustomize create --resources $YAML_FILES_COMMA_SEPARATED

            # # Add patch files to the appropriate section in kustomization.yaml
            # if [ ${#PATCH_YAML_FILES_ARRAY[@]} -ne 0 ]; then
            #   echo "patches:" >> kustomization.yaml
            #   for PATCH_FILE in "${PATCH_YAML_FILES_ARRAY[@]}"; do
            #     echo "Adding $PATCH_FILE to patches"
            #     echo "- path: $PATCH_FILE" >> kustomization.yaml
            #     echo "  target:" >> kustomization.yaml
            #     echo "    kind: $(yq e '.kind' $PATCH_FILE)" >> kustomization.yaml
            #   done
            # fi

            # # Add namePrefix if envPrefix is true
            # if [ "${{ inputs.envPrefix }}" = "true" ]; then
            #   echo "namePrefix: $ENV-" >> kustomization.yaml
            # fi
            
            # # merge_kustomization_files
          fi

          popd
          echo "=========================================="
        done
        echo "completed!"
      shell: bash